<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://theodorecooper.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://theodorecooper.github.io/" rel="alternate" type="text/html" hreflang="en-us" /><updated>2021-09-21T14:28:55+08:00</updated><id>https://theodorecooper.github.io/feed.xml</id><title type="html">Theodore Cooper</title><subtitle>It's a freak geek's silly site.
</subtitle><author><name>Theodore Cooper</name><email>ccooperr2005@gmail.com</email></author><entry><title type="html">[Download]Collection of the best &amp;amp; most popular DDos-attack tools</title><link href="https://theodorecooper.github.io/penetration/2021-ddos-tools/" rel="alternate" type="text/html" title="[Download]Collection of the best &amp;amp; most popular DDos-attack tools" /><published>2021-08-10T00:00:00+08:00</published><updated>2021-09-21T14:28:55+08:00</updated><id>https://theodorecooper.github.io/penetration/ddos-tools</id><content type="html" xml:base="https://theodorecooper.github.io/penetration/2021-ddos-tools/">&lt;hr /&gt;

&lt;h2 id=&quot;what-is-ddos&quot;&gt;What is DDos?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;In computing, a denial-of-service attack is a cyber-attack in which the perpetrator seeks to make a machine or network resource unavailable to its intended users by temporarily or indefinitely disrupting services of a host connected to the Internet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-to-get-the-collection&quot;&gt;How to get the collection?&lt;/h2&gt;

&lt;p&gt;​	All the tools have been pushed to my github repository: &lt;a href=&quot;https://github.com/theodorecooper/DDos-Attack-Tools&quot;&gt;&lt;strong&gt;&lt;em&gt;Download&lt;/em&gt;&lt;/strong&gt;: theodorecooper/DDos-Attack-Tools&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The collection will keep updating, adding new tools &amp;amp; tutorials. Please Follow/Watch/Star to get the latest updating.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;more-projects-theodorecooper&quot;&gt;&lt;em&gt;More projects: &lt;a href=&quot;https://github.com/theodorecooper?tab=repositories&quot;&gt;@theodorecooper&lt;/a&gt;&lt;/em&gt;&lt;/h4&gt;

&lt;h4 id=&quot;reach-me-hi-there-im-theodore&quot;&gt;&lt;em&gt;Reach me: &lt;a href=&quot;https://github.com/theodorecooper/theodorecooper&quot;&gt;Hi there!👋 I’m Theodore!&lt;/a&gt;&lt;/em&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;All collected tools and scripts come from the Internet and have passed the test, but we are not responsible for any undetected danger of software or scripts that may cause harm to your computer.&lt;/p&gt;

&lt;h2 id=&quot;legal-notice&quot;&gt;LEGAL NOTICE&lt;/h2&gt;

&lt;p&gt;THESE SOFTWARES AND SCRIPTS ARE PROVIDED FOR EDUCATIONAL USE ONLY! IF YOU ENGAGE IN ANY ILLEGAL ACTIVITY WE DO NOT TAKE ANY RESPONSIBILITY FOR IT. BY USING THESE SOFTWARES AND SCRIPTS YOU AGREE WITH THESE TERMS.&lt;/p&gt;

&lt;h2 id=&quot;software--script-info&quot;&gt;Software &amp;amp; Script Info&lt;/h2&gt;

&lt;h3 id=&quot;1-loic-low-orbit-ion-cannon_windows&quot;&gt;1. LOIC (Low Orbit Ion Cannon_Windows)&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;LOIC is an open-source network stress testing and denial-of-service attack application, written in C#. LOIC was initially developed by Praetox Technologies, but was later released into the public domain, and now is hosted on several open source platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-davoset&quot;&gt;2. davoset&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;DDoS attacks via other sites execution tool. It is console (command line) tool for conducting DDoS attacks on the sites via Abuse of Functionality and XML External Entities vulnerabilities at other sites.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;3-ddosim&quot;&gt;3. ddosim&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;DDOSIM is a tool that can be used in a laboratory environment to simulate a distributed denial of service (DDOS) attack against a target server. … It simulates several zombie hosts (having random IP addresses) which create full TCP connections to the target server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;4-goldeneye&quot;&gt;4. GoldenEye&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;GoldenEye is an python app for security testing.
GoldenEye is a HTTP DoS Test Tool.&lt;/p&gt;
  &lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;
  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; USAGE: ./goldeneye.py &amp;lt;url&amp;gt; [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; OPTIONS:
    Flag           Description                     Default
    -u, --useragents   File with user-agents to use                     (default: randomly generated)
    -w, --workers      Number of concurrent workers                     (default: 50)
    -s, --sockets      Number of concurrent sockets                     (default: 30)
    -m, --method       HTTP Method to use 'get' or 'post'  or 'random'  (default: get)
    -d, --debug        Enable Debug Mode [more verbose output]          (default: False)
    -h, --help         Shows this help #### Utilities * util/getuas.py - Fetchs user-agent lists from http://www.useragentstring.com/pages/useragentstring.php subpages (ex: ./getuas.py http://www.useragentstring.com/pages/Browserlist/) *REQUIRES BEAUTIFULSOUP4* * res/lists/useragents - Text lists (one per line) of User-Agent strings (from http://www.useragentstring.com) #### License This software is distributed under the GNU General Public License version 3 (GPLv3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5-hoic-high-orbit-ion-cannon&quot;&gt;5. Hoic (High Orbit Ion Cannon)&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Hoic is an open-source network stress testing and denial-of-service attack application designed to attack as many as 256 URLs at the same time. It was designed to replace the Low Orbit Ion Cannon which was developed by Praetox Technologies and later released into the public domain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;6-hulk-https-unbearable-load-king&quot;&gt;6. HULK (HTTPS Unbearable Load King)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/python-3.6%20%7C%203.7-blue?style=for-the-badge&quot; alt=&quot;Python Version&quot; /&gt;
&lt;img src=&quot;https://img.shields.io/badge/License-GNU-green?style=for-the-badge&quot; alt=&quot;License&quot; /&gt;
&lt;img src=&quot;https://img.shields.io/badge/platform-Windows--10-lightgrey?style=for-the-badge&quot; alt=&quot;Platform&quot; /&gt;
&lt;img src=&quot;https://img.shields.io/codacy/grade/a5939f58e4c44daebfbe46937686050b?style=for-the-badge&quot; alt=&quot;Codacy grade&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;This script is a &lt;em&gt;Distributed Denial of Service&lt;/em&gt; tool that can put heavy load on HTTPS servers,
in order to bring them to their knees, by exhausting the resource pool.
Its is meant for research purposes only and any malicious usage of this tool is prohibited.
&lt;strong&gt;The authors aren’t to be held responsible for any consequence of usage of this tool.&lt;/strong&gt;
 Authors : &lt;strong&gt;Hyperclaw79&lt;/strong&gt;, &lt;em&gt;version 3.0, 2.0&lt;/em&gt;; &lt;strong&gt;Barry Shteiman&lt;/strong&gt; , &lt;em&gt;version 1.0&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;usage-1&quot;&gt;Usage&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install -r requirements.txt&lt;/code&gt; before starting this script.&lt;/li&gt;
  &lt;li&gt;Launch the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hulk-server.py&lt;/code&gt; with the target website as arg.
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python hulk-server.py https://testdummysite.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Launch the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hulk-launcher.py&lt;/code&gt; to spawn multiple processes of hulk - one per CPU Core.
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python hulk-launcher.py localhost&lt;/code&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;If it’s a bot on a remote client, replace localhost with the server’s IP.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Sit back and sip your coffee while the carnage unleashes! &amp;gt;:D
    &lt;h4 id=&quot;license&quot;&gt;License&lt;/h4&gt;
    &lt;p&gt;HULK v3 is a Python 3 compatible Asynchronous Distributed Denial of Service Script.
&lt;a href=&quot;http://www.sectorix.com/2012/05/17/hulk-web-server-dos-tool/&quot;&gt;Original script&lt;/a&gt; was created by Barry Shteiman.
You can use that one if you have Python 2.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using a GNU license cause there was no mention about any license used by Barry.
Feel free to modify and share it, but leave some credits to us both and don’t hold us liable.&lt;/p&gt;

&lt;h3 id=&quot;7-pyloris&quot;&gt;7. pyloris&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Using HTTPLoris is simple. In its most basic form, HTTPLoris merely needs a copy of Python 2.6.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;usage-2&quot;&gt;Usage&lt;/h4&gt;
&lt;p&gt;On a Linux machine, one must simply invoke the script in a terminal, stating a site to test:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;motoma@rocksalt:/home/motoma&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python pyloris-3.0.py motomastyle.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On Mac OS X, one invokes PyLoris the same way. Using the Terminal Application:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hotdog:/Users/Motoma/ motoma&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python pyloris-3.0.py motomastyle.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Using HTTPLoris in Windows is a little different. One will need to know the location of the Python installation, and be in the proper directory. Load up a command prompt:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:&lt;span class=&quot;se&quot;&gt;\U&lt;/span&gt;sers&lt;span class=&quot;se&quot;&gt;\M&lt;/span&gt;otoma&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;esktop&lt;span class=&quot;se&quot;&gt;\p&lt;/span&gt;yloris-3.0&amp;gt;C:&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;ython26&lt;span class=&quot;se&quot;&gt;\p&lt;/span&gt;ython.exe pyloris-3.0.py motomastyle.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;advanced-options&quot;&gt;Advanced Options&lt;/h4&gt;
&lt;p&gt;Invoking HTTPLoris by using the commands above start a limited to 500 connections across 50 threads, each sending at 1 byte/second and waiting until the connection is forced shut by the server. While this behavior will bog down an Apache server with the default settings, it is not a very thorough test. The following are some additionall options that will allow one to customize the way HTTPLoris works:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-a, --attacklimit
The --attacklimit flag restricts the number of total connections (current + completed) during a single session. Set this to zero to specify no limit.
-c, --connectionlimit
Adjusting the --connectionlimit flag can drastically change how well HTTPLoris performs. The --connectionlimit flag directly controls the number of concurrent connections held during the session. In a base Apache environment, when this number is above the MaxClients setting, the server is unresponsive.
-t, --threadlimit
This is the number of attacker threads run during the session.
-b, --connectionspeed
This is the connection speed for each individual connection in bytes/second. Comparing this with the lenght of the request, and you should have an accurate guess of how long each connection should linger.
-f, --finish
Specifying the --finish flag will cause HTTPLoris to finish and close connections upon the completion of the request. This will prompt servers to send full responses to the HTTP requests that are made.
-k --keepalive
Using the --keepalive flag will add the Connection: Keep-Alive header to the HTTP request. On vulnerable servers, this will increase the duration of connections considerably.
-p, --port
HTTPLoris will connect on port 80 by default. Specifying the --port flag will change this behavior.
-P, --page
By default, HTTPLoris will make HTTP requests for &quot;/&quot;. Setting the --page flag will allow one to control the page that HTTPLoris requests.
-q, --quit
Terminate the connection without receiving reply from the server. This will reduce the effectivenes as connections will terminate as soon as the full request buffer has been sent.
-r, --requesttype
Setting the --requesttype flag will change the HTTP method used. Available options are GET, HEAD, POST, PUT, DELETE, OPTIONS, and TRACE. Certain proxies and load balancers will filter out certain types of requests, and hold them until the requests are complete. POST requests are commonly passed through due to their potential for large sizes, therefore this may cause different behavior.
-R, --referer
Adds a referring URL to the HTTP request.
-s, --Size
The --size flag allows one to increase the size of the request made. Increasing the size will in turn increase the duration of connections, leading to a longer sustained test. In situations where servers or firewalls are set to terminate unfinished connections, this can extend the length of the test drastically. This can also be used to test a web server's capability to handle multiple large requests and benchmark memory usage. The additional data is filled in the Cookie-Data field.
-u, --useragent
By default, HTTPLoris advertizes itself in the User-Agent header. The --useragent flag allows one to override this and masquerade as other web browsers. Useful because some sites will render different pages for different web browsers. 
-z, --gzip
Specifying the --gzip flag will allow instruct PyLoris to send an &quot;Accept-Encoding: gzip&quot; header. When combined with the --quit and --finish flags, this can test for the CEV-2009-1891 DoS vulnerability (http://www.mail-archive.com/dev@httpd.apache.org/msg44323.html). Also leads to larger CPU usage and smaller bandwidth usage.
-w, --timebetweenthreads
Setting the --timebetweenthreads flag will adjust the amount of time between threads spawning. Adjusting this in conjunction with the --threadlimit will change the CPU load on your local machine.
-W, --timebetweenconnections
Setting the --timebetweenconnections flag will adjust the amount of time between socket connections. This will directly affect how quickly the target's connection limit is reached.
Proxy Options 
HTTPLoris is able to connect through SOCKS4, SOCKS5, and HTTP proxies. This allows HTTPLoris to run through SSH tunnels, as well as TOR. Utilizing TOR should essentially eliminate the mitigating effects of ipchains, mod_antiloris, and mod_noloris.
--socksversion
Setting the --socksversion flag tells HTTPLoris to connect through a SOCKS proxy. Allowed values are SOCKS4, SOCKS5, and HTTP.
--sockshost
Set the --sockshost flag to the address of the SOCKS proxy when --socksversion is set. If this is not set, HTTPLoris will default to 127.0.0.1.
--socksport
Set the --socksport flag to the port number of the SOCKS proxy when --socksversion is set. 
--socksuser and --sockspass
Optionally, one may set a username and password for the SOCKS proxy using these two flags.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;8-rudy-r-u-dead-yet&quot;&gt;8. Rudy (R U Dead yet)&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;‘R U Dead Yet?’ or R.U.D.Y. is a denial-of-service attack tool that aims to keep a web server tied up by submitting form data at an absurdly slow pace. A R.U.D.Y. exploit is categorized as a low-and-slow attack, since it focuses on creating a few drawn-out requests rather than overwhelming a server with a high volume of quick requests. A successful R.U.D.Y. attack will result in the victim’s origin server becoming unavailable to legitimate traffic.&lt;br /&gt;
The R.U.D.Y. software includes a user-friendly point-and-click interface, so all an attacker needs to do is point the tool at a vulnerable target. Any web service that accepts form input is vulnerable to a R.U.D.Y. attack, since the tool works by sniffing out form fields and exploiting the form submission process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;9-torshammer&quot;&gt;9. Torshammer&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;USAGE:
./torshammer.py -t &amp;lt;target&amp;gt; [-r &amp;lt;threads&amp;gt; -p &amp;lt;port&amp;gt; -T -h]
-t|--target &amp;lt;Hostname|IP&amp;gt;
-r|--threads &amp;lt;Number of threads&amp;gt; Defaults to 256
-p|--port &amp;lt;Web Server Port&amp;gt; Defaults to 80
-T|--tor Enable anonymising through tor on 127.0.0.1:9050
-h|--help Shows this help
Eg. ./torshammer.py -t 192.168.1.100 -r 256
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;10-hping&quot;&gt;10. hping&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DESCRIPTION
	hping3 is a network tool able to send custom TCP/IP
	packets and to display target replies like ping do with
	ICMP replies. hping3 can handle fragmentation, and
	almost arbitrary packet size and content, using the
	command line interface.
	Since version 3, hping implements scripting capabilties,
	read the API.txt file under the /docs directory to know
	more about it.
	As a command line utility, hping is useful to test at
	many kind of networking devices like firewalls, routers,
	and so. It can be used as a traceroute alike program over all
	the supported protocols, firewalk usage, OS fingerprinting,
	port-scanner (see the --scan option introduced with hping3),
	TCP/IP stack auditing.
	It's also really a good didactic tool to learn TCP/IP.
	Using Tcl/Tk scripting much more can be done, because
	while the hping3 packet generation code is actually the
	hping2 put there mainly for compatibility with the command
	line interface, all the real news are about scripting.
	See the libs directory for example scripts. To run
	the example scripts type:
		hping3 exec ScriptName.htcl &amp;lt;arguments, if required&amp;gt;
	hping3 is developed and manteined by antirez@invece.org
	with the help of other hackers, and comes under GPL version
	2 of license. Development is open so you can send me
	patches/suggestions/affronts without inhibitions.
	Please check the AUTHORS file for a list of people that
	contribued with code, ideas, bug reports.
	Also vim developer, ee.lbl.gov for tcpdump and GNU in general.
DOCUMENTATION
	For the hping3 API check docs/API.txt
	You can find documentation about hping3 specific functions
	at http://wiki.hping.org
	Make sure to check the page at http://wiki.hping.org/34
REQUIREMENTS
	A supported unix-like OS, gcc, root access.
	Libpcap.
	Tcl/Tk is optional but strongly suggested.
INSTALLATION
	see INSTALL file.
have fun,
antirez
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;11-refref&quot;&gt;11. #Refref&lt;/h3&gt;
&lt;p&gt;#Refref - An SQLi injection DDOS tool&lt;/p&gt;

&lt;h3 id=&quot;12-hyenae&quot;&gt;12. Hyenae&lt;/h3&gt;
&lt;h4 id=&quot;features&quot;&gt;Features&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;ARP-Request flooding&lt;/li&gt;
  &lt;li&gt;ARP-Cache poisoning&lt;/li&gt;
  &lt;li&gt;PPPoE session initiation flooding&lt;/li&gt;
  &lt;li&gt;Blind PPPoE session termination&lt;/li&gt;
  &lt;li&gt;ICMP-Echo flooding&lt;/li&gt;
  &lt;li&gt;ICMP-Smurf attack&lt;/li&gt;
  &lt;li&gt;ICMP based TCP-Connection reset&lt;/li&gt;
  &lt;li&gt;TCP-SYN flooding&lt;/li&gt;
  &lt;li&gt;TCP-Land attack&lt;/li&gt;
  &lt;li&gt;Blind TCP-Connection reset&lt;/li&gt;
  &lt;li&gt;UDP flooding&lt;/li&gt;
  &lt;li&gt;DNS-Query flooding&lt;/li&gt;
  &lt;li&gt;DHCP-Discover flooding&lt;/li&gt;
  &lt;li&gt;DHCP starvation attack&lt;/li&gt;
  &lt;li&gt;DHCP-Release forcing&lt;/li&gt;
  &lt;li&gt;Cisco HSRP active router hijacking&lt;/li&gt;
  &lt;li&gt;Pattern based packet address configuration&lt;/li&gt;
  &lt;li&gt;Intelligent address and address protocol detection&lt;/li&gt;
  &lt;li&gt;Smart wildcard-based randomization&lt;/li&gt;
  &lt;li&gt;Daemon for setting up remote attack networks - HyenaeFE QT-Frontend support&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13-boompython&quot;&gt;13. Boom(Python)&lt;/h3&gt;

&lt;h3 id=&quot;14-rcpnet&quot;&gt;14. RCPnet&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;A multi-tool for network pen-testing written in python. It contains effective ping functions, hostname traceroute, and cloudflare detection. This is a modification from the FoxNuke Project, which only intended to be a DOS tool for network pen testing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;15-maddstress&quot;&gt;15. MaddStress&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;MaddStress is a simple denial-of-service (DDoS) attack tool that refers to attempts to burden a network or server with requests, making it unavailable to users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;features-1&quot;&gt;Features&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Strongest &amp;amp; Best DDoS Tools&lt;/li&gt;
  &lt;li&gt;UDP Configuration&lt;/li&gt;
  &lt;li&gt;TCP Configuration&lt;/li&gt;
  &lt;li&gt;SYN Configuration&lt;/li&gt;
  &lt;li&gt;Proxy Configuration&lt;/li&gt;
  &lt;li&gt;URL Grabber&lt;/li&gt;
  &lt;li&gt;Port Scanner&lt;/li&gt;
  &lt;li&gt;CloudFlare Resolver&lt;/li&gt;
  &lt;li&gt;Multi CloudFlare Resolver&lt;/li&gt;
  &lt;li&gt;Proxy Attack &amp;amp; Generator&lt;/li&gt;
  &lt;li&gt;Always Updates &amp;amp; Current News&lt;/li&gt;
  &lt;li&gt;System Information&lt;/li&gt;
  &lt;li&gt;Network Information&lt;/li&gt;
  &lt;li&gt;Simple Design UI&lt;/li&gt;
  &lt;li&gt;User friendly GUI&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;16-dequiem&quot;&gt;16. Dequiem&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Dequiem is a DDoS tool written in python 2.7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;features-2&quot;&gt;Features&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;DDoS&lt;/li&gt;
  &lt;li&gt;Find a website’s IP&lt;/li&gt;
  &lt;li&gt;Port Scanning&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;17-nemesis&quot;&gt;17. NEMESIS&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;NEMESIS is tool like torshammer or pyloic, used to Distributed Denial of Service attacks, writen in C#&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;18-chihulk&quot;&gt;18. ChiHULK&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Written in python 2.7&lt;br /&gt;
Edited version of the DDoS / DoS tool called HULK(.py).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;19-pentados&quot;&gt;19. PentaDos&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Written in python 2.7&lt;br /&gt;
A tool designed by members of PentagonCrew to help
you easily take down websites. &lt;em&gt;Ethical uses only&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;20-moihack-dos-attack-tool-reloaded&quot;&gt;20. Moihack DoS Attack Tool Reloaded&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;A simple TCP/UDP Port Flooder written in Python.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;21-slowloris&quot;&gt;21. Slowloris&lt;/h3&gt;

&lt;h3 id=&quot;22-anddos&quot;&gt;22. AnDDoS&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Stealth Anonymous Kill-The-Server&lt;/p&gt;

  &lt;p&gt;The classic DDoS! Overload the server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;23-torddos&quot;&gt;23. torDDos&lt;/h3&gt;
&lt;h4 id=&quot;author-r3nt0n&quot;&gt;Author: &lt;a href=&quot;https://github.com/r3nt0n&quot;&gt;r3nt0n&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://img.shields.io/badge/version-v1.0-orange.svg&quot; alt=&quot;[Version 1.0](https://github.com/R3nt0n)&quot; /&gt;
&lt;img src=&quot;http://img.shields.io/badge/python-2.7-blue.svg&quot; alt=&quot;[Python 2.7](https://github.com/R3nt0n)&quot; /&gt;
&lt;img src=&quot;https://img.shields.io/badge/license-GPL%203.0-brightgreen.svg&quot; alt=&quot;[GPL-3.0 License](https://github.com/R3nt0n)&quot; /&gt;
&lt;img src=&quot;http://img.shields.io/badge/date-14/07/2019-yellow.svg&quot; alt=&quot;[Date](https://github.com/R3nt0n)&quot; /&gt;  &lt;br /&gt;
TorDDos is a Python tool to automatize DDos attacks to a website from the Tor network.&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://github.com/R3nt0n/torDDos/blob/master/img/torddos.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;usage-3&quot;&gt;Usage&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -h, --help        show this help message and exit
  -t , --target     server to kick-out
  -n , --attempts   number of attempts of attack (default: 5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;how-it-works&quot;&gt;How it works&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Creates a new Tor session.&lt;/li&gt;
  &lt;li&gt;Makes a request to the website you choose as a target.&lt;/li&gt;
  &lt;li&gt;Releases the Tor session, then creates another and request data again to the website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;requirements&quot;&gt;Requirements&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Linux system&lt;/li&gt;
  &lt;li&gt;Python 2.7&lt;/li&gt;
  &lt;li&gt;Tor service&lt;/li&gt;
  &lt;li&gt;requests&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;legal-disclaimer&quot;&gt;Legal disclaimer&lt;/h4&gt;
&lt;p&gt;This tool is created for the sole purpose of security awareness and education, it should not be used against systems that you do not have permission to test/attack. The author is not responsible for misuse or for any damage that you may cause. You agree that you use this software at your own risk.&lt;/p&gt;</content><author><name>Theodore Cooper</name><email>ccooperr2005@gmail.com</email></author><category term="Penetration" /><category term="Penetration" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://theodorecooper.github.io/assets/img/blog/ddos-tools/ddos-tools.jpeg" /><media:content medium="image" url="https://theodorecooper.github.io/assets/img/blog/ddos-tools/ddos-tools.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Solve Qt: libpng warning: iCCP: known incorrect sRGB profile</title><link href="https://theodorecooper.github.io/qt/2021-qt-libpng-warning/" rel="alternate" type="text/html" title="Solve Qt: libpng warning: iCCP: known incorrect sRGB profile" /><published>2021-07-26T00:00:00+08:00</published><updated>2021-07-26T11:02:20+08:00</updated><id>https://theodorecooper.github.io/qt/qt-libpng-warning</id><content type="html" xml:base="https://theodorecooper.github.io/qt/2021-qt-libpng-warning/">&lt;hr /&gt;

&lt;h2 id=&quot;why-this-happens&quot;&gt;Why this happens?&lt;/h2&gt;

&lt;p&gt;This warning is mainly related to the format of the PNG image. In fact, to solve this warning, we just need to convert the image to a correct profile. There are many ways to solve this in both Windows and Linux.&lt;/p&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;

&lt;h3 id=&quot;method-1-imagemagick&quot;&gt;Method 1: ImageMagick&lt;/h3&gt;

&lt;p&gt;We use ImageMagick to convert the image: &lt;a href=&quot;http://www.imagemagick.org/&quot;&gt;ImageMagick Official&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download the corresponding compressed package according to the platform (such as Windows x64)&lt;/li&gt;
  &lt;li&gt;Unzip the downloaded compressed package to anywhere you want, we suppose your target path is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bat&lt;/code&gt; file in the PNG folder, for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert.bat&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Edit the content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert.bat&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@echo off
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;ImageMagick is fixing libpng warning
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;fn &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;onvert.exe
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; /f &lt;span class=&quot;s2&quot;&gt;&quot;tokens=*&quot;&lt;/span&gt; %%i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dir/s/b *.png'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%fn%&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%%i&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-strip&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%%i&quot;&lt;/span&gt;
pause
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Save the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert.bat&lt;/code&gt;, then double click to run it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;method-2-photoshop&quot;&gt;Method 2: Photoshop&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Open the image with Photoshop.&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit&lt;/code&gt; on the tool bar.&lt;/li&gt;
  &lt;li&gt;Change the image profile to “Adobe RGB (1998)”.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;method-3-qimage&quot;&gt;Method 3: QImage&lt;/h3&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;QImage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;linux&quot;&gt;Linux&lt;/h2&gt;

&lt;h3 id=&quot;method-1-convert&quot;&gt;Method 1: convert&lt;/h3&gt;

&lt;p&gt;It’s the easiest way to solve the warning in Linux:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;convert input.png output.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you don’t have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert&lt;/code&gt; command, just install it, it is included in ImageMagick:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;imagemagick
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;convert &lt;span class=&quot;nt&quot;&gt;-version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert&lt;/code&gt; also has many more excellent functions, you can resize your image like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;convert &lt;span class=&quot;nt&quot;&gt;-resize&lt;/span&gt; 1024x1024 input.png output.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rotate the image:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;convert &lt;span class=&quot;nt&quot;&gt;-rotate&lt;/span&gt; 270 input.png output.png    &lt;span class=&quot;c&quot;&gt;#clockwise rotate 270 degrees&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even add characters:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ convert -fill COLOR -pointsize SIZE -font FONT -draw 'text X,Y &quot;Hello, World!&quot;' input.png output.png 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And many more…&lt;/p&gt;

&lt;h3 id=&quot;method-2-qimage&quot;&gt;Method 2: QImage()&lt;/h3&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;QImage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Theodore Cooper</name><email>ccooperr2005@gmail.com</email></author><category term="Qt" /><category term="Qt" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://theodorecooper.github.io/assets/img/blog/qt-libpng-warning/imagemagick.jpeg" /><media:content medium="image" url="https://theodorecooper.github.io/assets/img/blog/qt-libpng-warning/imagemagick.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Run a CMD command in Qt without displaying the CMD window</title><link href="https://theodorecooper.github.io/qt/c/c++/c%20tutorials/2021-qtcmd/" rel="alternate" type="text/html" title="Run a CMD command in Qt without displaying the CMD window" /><published>2021-06-25T00:00:00+08:00</published><updated>2021-06-25T11:15:00+08:00</updated><id>https://theodorecooper.github.io/qt/c/c++/c%20tutorials/qtcmd</id><content type="html" xml:base="https://theodorecooper.github.io/qt/c/c++/c%20tutorials/2021-qtcmd/">&lt;hr /&gt;

&lt;h2 id=&quot;method-1-system&quot;&gt;Method 1: system&lt;/h2&gt;

&lt;p&gt;​	It’s the most basic method not only used in Qt, you should include the library &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdlib.h&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;​	&lt;em&gt;But, you have to see the ugly black cmd window.&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;stdlib.h&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;syntax&quot;&gt;Syntax&lt;/h3&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;parameters&quot;&gt;Parameters&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;​	 C-string containing the system command to be executed.&lt;/p&gt;

 	Or, alternatively, a &lt;em&gt;null pointer&lt;/em&gt;, to check for a command processor.

&lt;h3 id=&quot;return-value&quot;&gt;Return Value&lt;/h3&gt;

&lt;p&gt;​	 If command is a null pointer, the function returns a non-zero value in case a &lt;em&gt;command processor&lt;/em&gt; is available and a zero value if it is not.&lt;/p&gt;

 	If command is not a null pointer, the value returned depends  on the system and library implementations, but it is generally expected  to be the status code returned by the called command, if supported.

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/******example: ping******/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checking processor&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ok&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start ping&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ping localhost &amp;gt;&amp;gt; res.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	You can see the ping’s result in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res.txt&lt;/code&gt; after running these code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Is here some method I can take to avoid displaying the cmd window? The answer is: YES.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;method-2-winexec--without-cmd-window&quot;&gt;Method 2： WinExec – without cmd window&lt;/h2&gt;

&lt;p&gt;​	&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinExec()&lt;/code&gt; is another way to run a command, the advantage of using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinExec()&lt;/code&gt; is you don’t need to display the window, it means, you can hide the window. It needs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;winbase.h&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows.h&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;​	&lt;strong&gt;BUT&lt;/strong&gt;, this function is provided only for compatibility with 16-bit Windows. Applications should use the  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateProcess()&lt;/code&gt; function(as follows).&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;windows.h&lt;br /&gt;winbase.h&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;syntax-1&quot;&gt;Syntax&lt;/h3&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WinExec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LPCSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpCmdLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;uCmdShow&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;parameters-1&quot;&gt;Parameters&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpCmdLine&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;​	The command line (file name plus optional parameters) for the application to be executed.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uCmdShow&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;​	The display options.&lt;/p&gt;

&lt;p&gt;​	List of the acceptable values:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Value&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;SW_HIDE&lt;/strong&gt; 0&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Hides the window and activates another window.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;SW_SHOWNORMAL&lt;/strong&gt; &lt;strong&gt;SW_NORMAL&lt;/strong&gt; 1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Activates and displays a window. If the window is minimized or  maximized, the system restores it to its original size and position. An  application should specify this flag when displaying the window for the  first time.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;SW_SHOWMINIMIZED&lt;/strong&gt; 2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Activates the window and displays it as a minimized window.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;SW_SHOWMAXIMIZED&lt;/strong&gt; &lt;strong&gt;SW_MAXIMIZE&lt;/strong&gt; 3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Activates the window and displays it as a maximized window.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;SW_SHOWNOACTIVATE&lt;/strong&gt; 4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Displays a window in its most recent size and position. This value is similar to &lt;strong&gt;SW_SHOWNORMAL&lt;/strong&gt;, except that the window is not activated.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;SW_SHOW&lt;/strong&gt; 5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Activates the window and displays it in its current size and position.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;SW_MINIMIZE&lt;/strong&gt; 6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Minimizes the specified window and activates the next top-level window in the Z order.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;SW_SHOWMINNOACTIVE&lt;/strong&gt; 7&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Displays the window as a minimized window. This value is similar to &lt;strong&gt;SW_SHOWMINIMIZED&lt;/strong&gt;, except the window is not activated.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;SW_SHOWNA&lt;/strong&gt; 8&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Displays the window in its current size and position. This value is similar to &lt;strong&gt;SW_SHOW&lt;/strong&gt;, except that the window is not activated.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;SW_RESTORE&lt;/strong&gt; 9&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Activates and displays the window. If the window is minimized or  maximized, the system restores it to its original size and position. An  application should specify this flag when restoring a minimized window.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;SW_SHOWDEFAULT&lt;/strong&gt; 10&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Sets the show state based on the &lt;strong&gt;SW_&lt;/strong&gt; value specified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STARTUPINFO&lt;/code&gt; structure passed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateProcess()&lt;/code&gt; function by the program that started the application.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;SW_FORCEMINIMIZE&lt;/strong&gt; 11&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Minimizes a window, even if the thread that owns the window is not  responding. This flag should only be used when minimizing windows from a different thread.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;return-value-1&quot;&gt;Return value&lt;/h3&gt;

&lt;p&gt;​	If the function succeeds, the return value is greater than 31.&lt;/p&gt;

&lt;p&gt;​	If the function fails, the return value is one of the following error values.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Return code/value&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;The system is out of memory or resources.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ERROR_BAD_FORMAT&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The .exe file is invalid.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ERROR_FILE_NOT_FOUND&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The specified file was not found.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ERROR_PATH_NOT_FOUND&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;The specified path was not found.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;example-1&quot;&gt;Example&lt;/h3&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/******example: ping******/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;windows.h&amp;gt;
#include &amp;lt;winbase.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start ping&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;WinExec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cmd.exe /c ping localhost &amp;gt;&amp;gt; res.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SW_HIDE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	
	&lt;span class=&quot;cm&quot;&gt;/*
	'/c' can't be ignored as you have arguments after 'cmd.exe'
	*/&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	With this function you cannot determine whether the command is completed, because it is executed asynchronously.&lt;/p&gt;

&lt;p&gt;​	You must use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateProcess()&lt;/code&gt; to solve the problem.&lt;/p&gt;

&lt;h2 class=&quot;note&quot; id=&quot;method-3-createprocess--without-cmd-window&quot;&gt;Method 3: CreateProcess – without cmd window&lt;/h2&gt;

&lt;p&gt;​	This function is used to run a new program. It creates a new process and its primary thread. The new process executes the specified executable file.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;windows.h&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;syntax-2&quot;&gt;Syntax&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;LPCWSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpszImageName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;LPCWSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpszCmdLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;LPSECURITY_ATTRIBUTES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpsaProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;LPSECURITY_ATTRIBUTES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpsaThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fInheritHandles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fdwCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpvEnvironment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;LPWSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpszCurDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;LPSTARTUPINFOW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpsiStartInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;LPPROCESS_INFORMATION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lppiProcInfo&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;parameters-2&quot;&gt;Parameters&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpszImageName&lt;/code&gt;:
 	Pointer to a null-terminated string that specifies the module to execute.&lt;/p&gt;

&lt;p&gt;​	The string can specify the full path and filename of the module to execute or it can specify a partial path and filename.&lt;/p&gt;

&lt;p&gt;​	The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpszImageName&lt;/code&gt; parameter must be non-NULL and must include the module name.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpszCmdLine&lt;/code&gt;:
 	Pointer to a null-terminated string that specifies the command line to  execute. The system adds a null character to the command line, trimming  the string if necessary, to indicate which file was actually used.&lt;/p&gt;

&lt;p&gt;​	The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpszCmdLine&lt;/code&gt; parameter can be NULL. In that case, the function uses the string pointed to by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpszImageName&lt;/code&gt; as the command line.&lt;/p&gt;

&lt;p&gt;​	If both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpszImageName&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpszCmdLine&lt;/code&gt; are non-NULL, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*lpszImageName&lt;/code&gt; specifies the module to execute, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*lpszCmdLine&lt;/code&gt; specifies the command line. C runtime processes can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv &lt;/code&gt;arguments.&lt;/p&gt;

&lt;p&gt;​	If the filename does not contain an extension, .EXE is assumed. If  the filename ends in a period (.) with no extension, or the filename  contains a path, .EXE is not appended.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpsaProcess&lt;/code&gt;:
 	Process safety attributes&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpsaThread&lt;/code&gt;:
	 Thread safety attributes&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fInheritHandles&lt;/code&gt;:
 	Whether to inherit the attributes of the parent process&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fdwCreate&lt;/code&gt;:
 	Specifies additional flags that control the priority class and the  creation of the process. The following creation flags can be specified  in any combination, except as noted:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Value&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_DEFAULT_ERROR_MODE&lt;/td&gt;
      &lt;td&gt;Not supported.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_NEW_CONSOLE&lt;/td&gt;
      &lt;td&gt;The new process has a new console, instead of inheriting the  parent’s console. This flag cannot be used with the DETACHED_PROCESS  flag.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_NEW_PROCESS_GROUP&lt;/td&gt;
      &lt;td&gt;Not supported.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_SEPARATE_WOW_VDM&lt;/td&gt;
      &lt;td&gt;Not supported.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_SHARED_WOW_VDM&lt;/td&gt;
      &lt;td&gt;Not supported.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_SUSPENDED&lt;/td&gt;
      &lt;td&gt;The primary thread of the new process is created in a suspended state, and does not run until the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResumeThread&lt;/code&gt; function is called.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CREATE_UNICODE_ENVIRONMENT&lt;/td&gt;
      &lt;td&gt;Not supported.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DEBUG_PROCESS&lt;/td&gt;
      &lt;td&gt;If this flag is set, the calling process is treated as a debugger,  and the new process is a process being debugged. Child processes of the  new process are also debugged. The system notifies the debugger of all  debug events that occur in the process being debugged.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;If you create a process with this flag set, only the calling thread (the thread that called CreateProcess) can call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WaitForDebugEvent&lt;/code&gt; function.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DEBUG_ONLY_THIS_PROCESS&lt;/td&gt;
      &lt;td&gt;If this flag is set, the calling process is treated as a debugger,  and the new process is a process being debugged. No child processes of  the new process are debugged. The system notifies the debugger of all  debug events that occur in the process being debugged.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DETACHED_PROCESS&lt;/td&gt;
      &lt;td&gt;Not supported.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpvEnvironment&lt;/code&gt;:
 	Pointer to current environment.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpszCurDir&lt;/code&gt;:
 	Pointer to current directory.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpsiStartInfo&lt;/code&gt;:
 	Pointer to STARTUPINFO structure&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lppiProcInfo&lt;/code&gt;:
 	Pointer to a PROCESS_INFORMATION structure that receives identification information about the new process.&lt;/p&gt;

&lt;h3 id=&quot;example-2&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Here’s the Microsoft’s example:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;windows.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;tchar.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_tmain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCHAR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;STARTUPINFO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PROCESS_INFORMATION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ZeroMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wShowWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SW_HIDE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//hide window&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ZeroMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Start the child process. &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// No module name (use command line)&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;cmd.exe /c ping localhost &amp;gt;&amp;gt; res.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Command line&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// Process handle not inheritable&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// Thread handle not inheritable&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// Set handle inheritance to FALSE&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// No creation flags&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// Use parent's environment block&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// Use parent's starting directory &lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// Pointer to STARTUPINFO structure&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// Pointer to PROCESS_INFORMATION structure&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CreateProcess failed (%d).&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetLastError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Wait until child process exits.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WaitForSingleObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INFINITE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Close process and thread handles. &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CloseHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hProcess&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CloseHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hThread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;method-4-qprocess--without-cmd-window&quot;&gt;Method 4： QProcess – without cmd window&lt;/h2&gt;

&lt;p&gt;The QProcess class is used to start external programs and to communicate with them. It’s a modern method to run a command.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Header&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;QProcess&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;qmake&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;QT += core&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;QProcess&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cmd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QStringList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ping localhost &amp;gt;&amp;gt; res.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForStarted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another way:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;QProcess&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;QString&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cmd.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;QStringList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;res.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitForFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//p.start(command, args);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//p.waitForStarted();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//p.waitForFinished();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;full-example&quot;&gt;Full example:&lt;/h3&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//file: &quot;mainwindow.h&quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef MAINWINDOW_H  
#define MAINWINDOW_H  
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;QtGui&amp;gt;  
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QMainWindow&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;Q_OBJECT&lt;/span&gt;  

&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;MainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QWidget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    
    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;openProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
    
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exitCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  

&lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;QProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;  

&lt;span class=&quot;cp&quot;&gt;#endif // MAINWINDOW_H 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//file: &quot;mainwindow.cpp&quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;mainwindow.h&quot;  
&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;MainWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QWidget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QMainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;QPushButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QPushButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execute&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGNAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
 
&lt;span class=&quot;n&quot;&gt;MainWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
 
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cmd.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QStringList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/c&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ping localhost &amp;gt;&amp;gt; res.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGNAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
 
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exitCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exitCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;QTextCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbkCodec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QTextCodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;codecForName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GBK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;QString&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gbkCodec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toUnicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;   
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;at-last&quot;&gt;At last&lt;/h2&gt;
&lt;p&gt;At last, I recommand QProcess and CreateProcess.&lt;/p&gt;</content><author><name>Theodore Cooper</name><email>ccooperr2005@gmail.com</email></author><category term="Qt" /><category term="C/C++" /><category term="C Tutorials" /><category term="Qt" /><category term="C/C++" /><category term="C Tutorials" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://theodorecooper.github.io/assets/img/blog/qt-cmd/qt-logo.png" /><media:content medium="image" url="https://theodorecooper.github.io/assets/img/blog/qt-cmd/qt-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Penetration Testing | ARP Spoofing(Poisoning) in the internal network &amp;amp; How to prevent it</title><link href="https://theodorecooper.github.io/penetration/linux/2021-arp-spoofing/" rel="alternate" type="text/html" title="Penetration Testing | ARP Spoofing(Poisoning) in the internal network &amp;amp; How to prevent it" /><published>2021-02-11T00:00:00+08:00</published><updated>2021-06-18T22:07:09+08:00</updated><id>https://theodorecooper.github.io/penetration/linux/arp-spoofing</id><content type="html" xml:base="https://theodorecooper.github.io/penetration/linux/2021-arp-spoofing/">&lt;hr /&gt;

&lt;h2 id=&quot;address-resolution-protocol-arp&quot;&gt;Address Resolution Protocol (&lt;strong&gt;ARP&lt;/strong&gt;)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Address Resolution Protocol (&lt;strong&gt;ARP&lt;/strong&gt;) is a procedure for mapping a dynamic Internet Protocol address (IP  address) to a permanent physical machine address in a local area network (LAN). The physical machine address is also known as a Media Access  Control or MAC address.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-arp-works&quot;&gt;How ARP works?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/arp-spoofing/arp.png&quot; alt=&quot;arp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​	When a new device is joined into a LAN,  it is assigned a unique IP address to use for identification and communication. When an incoming packet destined for a host machine on a particular LAN arrives at a gateway, the gateway asks the ARP program to find a MAC address that matches the IP address. A table called the ARP cache maintains a record of each IP  address and its corresponding MAC address.&lt;/p&gt;

&lt;p&gt;​	If the MAC address is not present in the ARP cache table then the source device will generate an &lt;strong&gt;&lt;em&gt;ARP Request&lt;/em&gt;&lt;/strong&gt; message. In the request message the source puts its own MAC address,  its IP address, destination IP address and the destination MAC address  is left blank since the source is trying to find this.&lt;/p&gt;

&lt;p&gt;​	In generally,  Address Resolution Protocol is used to obtain the MAC address of the destination host based on its IP address. It converts the IP address of the target host into a MAC address before sending a frame.&lt;/p&gt;

&lt;h2 id=&quot;types-of-arp-spoofing&quot;&gt;Types of ARP Spoofing&lt;/h2&gt;

&lt;p&gt;​	There are two types of ARP Spoofing:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;For instance, there are three hosts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; wants to communicate with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;, when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; asks &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; that whether he is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; shamelessly says: “YES!!!”. So packages that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; should have sent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; are sent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Still that example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; wants to communicate with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;, this time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; asks that who is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; shamelessly says again: “I am &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;!!!” So, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; sends  packages to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; says to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;: “I am &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;!!!” and send the package to him.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-can-we-do&quot;&gt;What can we do?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Disconnect other devices’ network connections&lt;/li&gt;
  &lt;li&gt;Hijack the traffic of other devices and gateways in the LAN to obtain sensitive information like password, browsing images and so on&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/arp-spoofing/spoofing.png&quot; alt=&quot;arpspoofing&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;arp-spoofing-tutorial&quot;&gt;ARP Spoofing Tutorial&lt;/h2&gt;

&lt;p&gt;​	First of all, host and target must be in a same LAN, of course.&lt;/p&gt;

&lt;h3 id=&quot;0-environment&quot;&gt;#0. Environment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Parrot OS(You can also use Kali Linux)&lt;/li&gt;
  &lt;li&gt;Wireless Network Card to connect to the WiFi.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-get-local-ip&quot;&gt;#1. Get local IP&lt;/h3&gt;

&lt;p&gt;​	Open a terminal:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip addr show
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-scan-targets-ip&quot;&gt;#2. Scan target’s IP&lt;/h3&gt;

&lt;p&gt;​	Usually we use &lt;strong&gt;&lt;em&gt;Nmap&lt;/em&gt;&lt;/strong&gt; to scan target’s IP:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sP&lt;/span&gt; 192.168.1.1/24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; is the default gateway address, it depends your router.)&lt;/p&gt;

&lt;p&gt;​	Another easy way is use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zenmap&lt;/code&gt;, it’s an official GUI version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nmap&lt;/code&gt;. It is a multi-platform (Linux, Windows, Mac OS X, BSD, etc.) free and open source application which aims to make Nmap easy for beginners to use.&lt;/p&gt;

&lt;p&gt;​	The easiest way is – if you have already logged in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; – sometimes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; as username and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; as password – you see, quite easy.&lt;/p&gt;

&lt;h3 id=&quot;3-disconnect-targets-connections&quot;&gt;#3. Disconnect target’s connections&lt;/h3&gt;

&lt;h4 id=&quot;use-arpspoof&quot;&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arpspoof&lt;/code&gt;&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;arpspoof &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; interface] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; target_ip] &amp;lt;host_ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;interface: Your wireless interface(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; to get)&lt;/li&gt;
  &lt;li&gt;target: Target’s IP address&lt;/li&gt;
  &lt;li&gt;host: Your IP address.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​	Because the attacker did not enable port forwarding, the request could not be released, and the target’s network was disconnected. So if we enable port forwarding, we can hijack target’s traffic.&lt;/p&gt;

&lt;h3 id=&quot;4-hijack-targets-traffic&quot;&gt;#4. Hijack target’s traffic&lt;/h3&gt;

&lt;p&gt;​	Enable port forwarding:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo echo &lt;/span&gt;1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /proc/sys/net/ipv4/ip_forward
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	Then we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arpspoof&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;arpspoof &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; interface] &amp;lt;host_ip&amp;gt; &amp;lt;target_ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	Because the target machine is connected to WiFi, when performing ARP Spoofing, you need to change the order with the target machine. If you don’t change it, you can see that the MAC address of the gateway is the same as the MAC address of the attacking machine during ARP Spoofing, so that the target machine cannot communicate normally.&lt;/p&gt;

&lt;h4 id=&quot;use-driftnet-to-get-images&quot;&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;driftnet&lt;/code&gt; to get images&lt;/h4&gt;

&lt;p&gt;​	After hijacking the traffic successfully, we can save income images from target with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;driftnet&lt;/code&gt;(HTTP only).&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;driftnet &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; interface]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	Moreover,&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;driftnet &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; directory] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; interface]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	to set directory that images will be saved.&lt;/p&gt;

&lt;h4 id=&quot;use-ettercap-to-get-passwords&quot;&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ettercap&lt;/code&gt; to get passwords&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ettercap &lt;span class=&quot;nt&quot;&gt;-Tq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; interface]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;-T: Text mode&lt;/li&gt;
  &lt;li&gt;-q: Quiet mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​	Also, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wireshark&lt;/code&gt;, it has a user-friendly GUI and easier for beginners.&lt;/p&gt;

&lt;h2 id=&quot;how-to-prevent-arp-spoofing&quot;&gt;How to prevent ARP Spoofing?&lt;/h2&gt;

&lt;p&gt;​	To be honest, it’s not hard to prevent ARP Spoofing, but many people don’t do like that.&lt;/p&gt;

&lt;h3 id=&quot;1-rely-on-virtual-private-networksvpn&quot;&gt;#1. Rely on Virtual Private Networks(VPN)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/arp-spoofing/VPN.jpg&quot; alt=&quot;vpn&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​	One way to prevent ARP spoofing from happening in the first place is  to rely on Virtual Private Networks(VPN). When you connect to the internet, you typically first connect to an Internet Service Provider(ISP) in order to connect to another website. However, when you use a VPN, you’re using an encrypted tunnel that largely blocks your activity from ARP spoofing hackers. Both the method by which you’re conducting the online activity and the data that goes through it is encrypted.&lt;/p&gt;

&lt;p&gt;​	Moreover, you should consider a VPN if you travel frequently or use public WiFi  hotspots while working with sensitive information or data. You could also consider using a mobile internet device that could help reduce the chances of someone working their way into your system through public WiFi with no login or password requirements. Although VPN can be a safer way to use the internet, it can sometimes slow down your online access due to the encrypting and decrypting processing power.&lt;/p&gt;

&lt;h3 id=&quot;2get-a-detection-tool&quot;&gt;#2.Get a Detection Tool&lt;/h3&gt;

&lt;p&gt;​	Even with ARP knowledge and techniques in place, it’s not always possible to detect a spoofing attack. Hackers are becoming increasingly stealthy at remaining undetected and use new technologies and tools to stay ahead  of their victims. Instead of strictly focusing on prevention, make sure  you have a detection method in place. Using a third-party detection tool can help you see when a spoofing attack is happening so you can work on stopping it in its tracks.&lt;/p&gt;

&lt;p&gt;​	A third-party tool like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XArp&lt;/code&gt; can help detect if you are being attacked by ARP spoofing. However, that’s just the first step to ARP spoofing protection. In addition to using the right tools, you should also consider a robust monitoring tool or service.&lt;/p&gt;

&lt;p&gt;Some third-party tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/img/blog/arp-spoofing/http://ee.lbl.gov/&quot;&gt;&lt;strong&gt;&lt;em&gt;Arpwatch&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;: If the cross-platform open-source tool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arpwatch&lt;/code&gt; is integrated into a  local IPv4 network, it continuously records all ARP activities in the  LAN. All inbound ARP packets are taken by the program along with  accompanying address information and stored in a central database. If  older entries are found that don’t match the data currently being sent,  the program sends an email warning to the administrator. The procedure  is effective, but is only suitable for networks with static IP  addresses. If LAN IPs are distributed dynamically over a DHCP server,  any change in the IP/MAC mapping results in a false alarm.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/img/blog/arp-spoofing/https://www.isl.de/en/arp-guard/product.html&quot;&gt;&lt;strong&gt;&lt;em&gt;ARP-Guard&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARP-Guard&lt;/code&gt; from the company ISL also monitors the internal network and relies on two different sensors. The LAN sensor works similarly to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arpwatch&lt;/code&gt;, analyzing inbound data packets and sounding an alarm in case of any discrepancies. The sensor management architecture of the software also has an SNMP sensor, which uses the Simple Network Management Protocol(SNMP) to access devices connected to the LAN and read out their ARP tables. In this way, not only are ARP attacks localized and warded off; the integrated address management also allows administrators to detect unwanted devices and prevent them from accessing the network.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/img/blog/arp-spoofing/http://www.xarp.net&quot;&gt;&lt;strong&gt;&lt;em&gt;XArp&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;: The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XArp&lt;/code&gt; software relies on both active and passive modules to protect a network from ARP spoofing. The passive modules analyze ARP packets that are sent on the network, and match the accompanying address assignment with older entries. If discrepancies are noticed, the program alarm sounds. The control mechanism is based on statistical analyses and checks the network traffic on the basis on of various patterns which, according to developers, indicate ARP attacks. The sensitivity of this traffic filter can be adjusted gradually. The active modules of the software send their own packets into the network, in order to validate the ARP tables of the accessible devices and to fill them with valid entries.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3mac-address-binding&quot;&gt;#3.MAC Address Binding&lt;/h3&gt;

&lt;p&gt;​	Binding MAC address is the easiest way the prevent ARP Spoofing, in Linux, just use:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;arp &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &amp;lt;ip&amp;gt; &amp;lt;mac&amp;gt;	&lt;span class=&quot;c&quot;&gt;#Bind MAC address&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;arp &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &amp;lt;ip&amp;gt; &amp;lt;mac&amp;gt;	&lt;span class=&quot;c&quot;&gt;#Disbing MAC address&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ip: Your IP address&lt;/li&gt;
  &lt;li&gt;mac: Your MAC address&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​	In Windows, open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arp &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &amp;lt;ip&amp;gt; &amp;lt;mac&amp;gt;	&lt;span class=&quot;c&quot;&gt;#temporary&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	or&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netsh i i show &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#show Idx&lt;/span&gt;

netsh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; i i add ne &amp;lt;Idx&amp;gt; &amp;lt;ip&amp;gt; &amp;lt;mac&amp;gt; &lt;span class=&quot;nv&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;active	&lt;span class=&quot;c&quot;&gt;#temporary&lt;/span&gt;

netsh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; i i add ne &amp;lt;Idx&amp;gt; &amp;lt;ip&amp;gt; &amp;lt;mac&amp;gt;

netsh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; i i del ne &amp;lt;Idx&amp;gt;	&lt;span class=&quot;c&quot;&gt;#Disbing MAC address&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	(Some routers have functions to bind MAC address too.)&lt;/p&gt;</content><author><name>Theodore Cooper</name><email>ccooperr2005@gmail.com</email></author><category term="Penetration" /><category term="Linux" /><category term="Penetration" /><category term="Linux" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://theodorecooper.github.io/assets/img/blog/arp-spoofing/arpspoofing.jpg" /><media:content medium="image" url="https://theodorecooper.github.io/assets/img/blog/arp-spoofing/arpspoofing.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Syntax Error | Conky syntax update</title><link href="https://theodorecooper.github.io/linux/beautify/2021-new-conky/" rel="alternate" type="text/html" title="Syntax Error | Conky syntax update" /><published>2021-01-29T00:00:00+08:00</published><updated>2021-06-18T20:10:03+08:00</updated><id>https://theodorecooper.github.io/linux/beautify/new-conky</id><content type="html" xml:base="https://theodorecooper.github.io/linux/beautify/2021-new-conky/">&lt;hr /&gt;

&lt;h2 id=&quot;featuresgithub&quot;&gt;Features(Github)&lt;/h2&gt;

&lt;p&gt;Conky can display more than 300 built-in objects, including support for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A plethora of OS stats (uname, uptime, &lt;strong&gt;CPU usage&lt;/strong&gt;, &lt;strong&gt;mem usage&lt;/strong&gt;, disk usage, &lt;strong&gt;“top”&lt;/strong&gt; like process stats, and &lt;strong&gt;network monitoring&lt;/strong&gt;, just to name a few).&lt;/li&gt;
  &lt;li&gt;Built-in &lt;strong&gt;IMAP&lt;/strong&gt; and &lt;strong&gt;POP3&lt;/strong&gt; support.&lt;/li&gt;
  &lt;li&gt;Built-in support for many popular music players (&lt;a href=&quot;https://musicpd.org/&quot;&gt;MPD&lt;/a&gt;, &lt;a href=&quot;https://github.com/xmms2/wiki/wiki&quot;&gt;XMMS2&lt;/a&gt;, &lt;a href=&quot;https://audacious-media-player.org/&quot;&gt;Audacious&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Can be extended using built-in &lt;a href=&quot;https://github.com/brndnmtthws/conky/blob/main/lua&quot;&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/a&gt; support, or any of your own scripts and programs (&lt;a href=&quot;https://github.com/brndnmtthws/conky/wiki#tutorial&quot;&gt;more&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Built-in &lt;a href=&quot;https://docs.enlightenment.org/api/imlib2/html/&quot;&gt;&lt;strong&gt;Imlib2&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.cairographics.org/&quot;&gt;&lt;strong&gt;Cairo&lt;/strong&gt;&lt;/a&gt; bindings for arbitrary drawing with Lua (&lt;a href=&quot;https://github.com/brndnmtthws/conky/wiki/Lua&quot;&gt;more&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Runs on Linux, FreeBSD, OpenBSD, DragonFlyBSD, NetBSD, Solaris, Haiku, and macOS!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;… and much much more.&lt;/p&gt;

&lt;p&gt;Conky can display information either as text, or using simple progress bars and graph widgets, with different fonts and colours.&lt;/p&gt;

&lt;h2 id=&quot;syntax&quot;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;​	After upgrade the whole system, I found conky doesn’t work well, the terminal pops out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syntax error&lt;/code&gt; when running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conky&lt;/code&gt;. Yes, the syntax changed, I have to rewrite the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.conkyrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;​	Before updating, conky’s syntax is easy, very easy to understand, now, it’s more like… eh… TOML? I don’t know, but as a programmer, a geek, the new syntax seems better to adapt to.&lt;/p&gt;

&lt;p&gt;​	So, let’s take a look at the newest demos:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;
Conky, a system monitor, based on torsmo

Any original torsmo code is licensed under the BSD license

All code written since the fork of torsmo is licensed under the GPL

Please see COPYING &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;details

Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2004, Hannu Saransaari and Lauri Hakkarainen
Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2005-2019 Brenden Matthews, Philip Kovacs, et. al. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;see AUTHORS&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;at your option&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; any later version.

This program is distributed &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the hope that it will be useful,
but WITHOUT ANY WARRANTY&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;

conky.config &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    alignment &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'top_left'&lt;/span&gt;,
    background &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
    border_width &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1,
    cpu_avg_samples &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2,
    default_color &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'white'&lt;/span&gt;,
    default_outline_color &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'white'&lt;/span&gt;,
    default_shade_color &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'white'&lt;/span&gt;,
    double_buffer &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
    draw_borders &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
    draw_graph_borders &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
    draw_outline &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
    draw_shades &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
    extra_newline &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
    font &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DejaVu Sans Mono:size=12'&lt;/span&gt;,
    gap_x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 60,
    gap_y &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 60,
    minimum_height &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5,
    minimum_width &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5,
    net_avg_samples &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2,
    no_buffers &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
    out_to_console &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
    out_to_ncurses &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
    out_to_stderr &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
    out_to_x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
    own_window &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
    own_window_class &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Conky'&lt;/span&gt;,
    own_window_type &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'desktop'&lt;/span&gt;,
    show_graph_range &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
    show_graph_scale &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
    stippled_borders &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0,
    update_interval &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1.0,
    uppercase &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
    use_spacer &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'none'&lt;/span&gt;,
    use_xft &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

conky.text &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Info:&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 32 Conky &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$conky_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sysname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$nodename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$machine&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$hr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Uptime:&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uptime&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Frequency &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;MHz&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$freq&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Frequency &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;GHz&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$freq_g&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;RAM Usage:&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mem&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$memmax&lt;/span&gt; - &lt;span class=&quot;nv&quot;&gt;$memperc&lt;/span&gt;% &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;membar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Swap Usage:&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$swap&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$swapmax&lt;/span&gt; - &lt;span class=&quot;nv&quot;&gt;$swapperc&lt;/span&gt;% &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;swapbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;CPU Usage:&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cpu&lt;/span&gt;% &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cpubar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Processes:&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$processes&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Running:&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$running_processes&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$hr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;File systems:
 / &lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fs_used&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; /&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fs_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; /&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fs_bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 6 /&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Networking:
Up:&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;upspeed&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; - Down:&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;downspeed&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$hr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; grey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Name              PID     CPU%   MEM%
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; lightgrey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; name 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; pid 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; cpu 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; mem 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; lightgrey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; name 2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; pid 2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; cpu 2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; mem 2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; lightgrey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; name 3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; pid 3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; cpu 3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; mem 3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; lightgrey&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; name 4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; pid 4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; cpu 4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; mem 4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/852504/50325033-1089e480-04a8-11e9-8963-f64cb3d0003b.png&quot; alt=&quot;Default configs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​	Yes, inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--[[&lt;/code&gt;and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]]&lt;/code&gt; is the comments. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conky.config = {&lt;/code&gt; marks the beginning of the config part and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;}&lt;/code&gt; means the end.&lt;/p&gt;

&lt;p&gt;different types of variable such as “number”, characters(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'char'&lt;/code&gt;), boolean(true &amp;amp; false) will be assigned to the properties which is to the left of the equal sign, just like most program languages. Of course, inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conky.text = [[&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;]]&lt;/code&gt;, you could customize your conky’s appearance and looks, you don’t need to change a lot even though syntax updated.&lt;/p&gt;

&lt;h2 id=&quot;my-conkyrc&quot;&gt;My &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.conkyrc&lt;/code&gt;&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;​	It’s easy to update the own configure file, mine works well now: &lt;a href=&quot;/assets/img/blog/new-conky/updated-conkyrc.zip&quot;&gt;.conkyrc&lt;/a&gt;. Screenshots goes here: [Conky&lt;/td&gt;
      &lt;td&gt;Awesome system monitor for Linux](https://theodorecooper.github.io/2021-conky/).&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;more--wiki&quot;&gt;More – Wiki&lt;/h2&gt;

&lt;p&gt;​	More options and tutorial here: &lt;a href=&quot;https://github.com/brndnmtthws/conky/wiki/&quot;&gt;Conky Wiki(Github)&lt;/a&gt;.&lt;/p&gt;</content><author><name>Theodore Cooper</name><email>ccooperr2005@gmail.com</email></author><category term="Linux" /><category term="Beautify" /><category term="Linux" /><category term="Beautify" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/852504/50325033-1089e480-04a8-11e9-8963-f64cb3d0003b.png" /><media:content medium="image" url="https://user-images.githubusercontent.com/852504/50325033-1089e480-04a8-11e9-8963-f64cb3d0003b.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Conky | Awesome system monitor for Linux</title><link href="https://theodorecooper.github.io/linux/beautify/2021-conky/" rel="alternate" type="text/html" title="Conky | Awesome system monitor for Linux" /><published>2021-01-15T00:00:00+08:00</published><updated>2021-06-18T20:23:33+08:00</updated><id>https://theodorecooper.github.io/linux/beautify/conky</id><content type="html" xml:base="https://theodorecooper.github.io/linux/beautify/2021-conky/">&lt;p&gt;&lt;img src=&quot;/assets/img/blog/conky/conky.jpg&quot; alt=&quot;conky&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;about-conky&quot;&gt;About Conky…&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Conky&lt;/strong&gt; is a free software desktop system monitor for the X Window System. It is available for Linux, FreeBSD, and OpenBSD. Conky is highly configurable and is able to monitor many system variables including the status of the CPU, memory, swap space (&lt;a href=&quot;https://en.wikipedia.org/wiki/Swap_space&quot;&gt;what is swap space?&lt;/a&gt;), disk storage, temperatures, processes, network interfaces, battery power, system messages, e-mail inboxes, Arch Linux updates, many popular music players, weather updates, breaking news, and much more. Unlike system monitors that use high-level widget toolkits to render their information, Conky is drawn directly in an X window.  This allows it to be configured such that it consumes relatively few  system resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;​	Are you getting bored with your dull backgrounds? Let’s use &lt;strong&gt;&lt;em&gt;conky&lt;/em&gt;&lt;/strong&gt; to improve that.&lt;/p&gt;

&lt;h2 id=&quot;common-uses&quot;&gt;Common uses&lt;/h2&gt;

&lt;p&gt;​	If you’re using Pinguy OS or CrunchBang Linux(…). Conky is pre-configured in the default installation, but I think most of users are using Debian, Ubuntu, Fedora and so on. Conky is not installed by default in these systems. We should install conky first.&lt;/p&gt;

&lt;h3 id=&quot;get-conky&quot;&gt;Get conky&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Open up a terminal window&lt;/li&gt;
  &lt;li&gt;Type following command and your sudo password&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;conky-all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;When prompted, accepted the installation by typing &lt;em&gt;y&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;configure-a-theme&quot;&gt;Configure a theme&lt;/h3&gt;

&lt;p&gt;​	What conky does is read the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/conky/conky.config&lt;/code&gt; file (when no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.conkyrc&lt;/code&gt; file is present) and display as you set. So there are tow solutions to have a good looking conky: either you modify the configure file on your own or you download a conky theme from the Internet and use it directly. There are many websites which could provide with plenty of awesome conky themes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.deviantart.com/&quot;&gt;Deviant Art&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.opendesktop.org/search?projectSearchText=conky&quot;&gt;Open Desktop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​	Using these conky themes is similar to installing source code. A good conky theme will come with a README that  tells you what to change in the conky theme files and other important  things about using the conky theme. Most of the time you have to change  the path to image files or Lua script.&lt;/p&gt;

&lt;h3 id=&quot;launch-conky&quot;&gt;Launch conky&lt;/h3&gt;

&lt;p&gt;​	It’s easy to launch conky:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conky
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;usage-example&quot;&gt;Usage example&lt;/h3&gt;

&lt;p&gt;​	A simple configuration for Conky which displays the time on a user’s desktop is as follows:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;update_interval 30

own_window &lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;own_window_type desktop

use_xft &lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;xftfont DejaVu Sans:size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;14

alignment bottom_right

TEXT
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; %H&lt;/span&gt;:%M&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	Here’s my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.conkyrc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# set to yes if you want Conky to be forked in the background&lt;/span&gt;
background no
cpu_avg_samples 2
net_avg_samples 2
out_to_console no
&lt;span class=&quot;c&quot;&gt;# X font when Xft is disabled, you can pick one with program xfontsel&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#font 7x12&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#font 6x10&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#font 7x13&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#font 8x13&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#font 7x12&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#font *mintsmild.se*&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#font -*-*-*-*-*-*-34-*-*-*-*-*-*-*&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#font -artwiz-snap-normal-r-normal-*-*-100-*-*-p-*-iso8859-1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Use Xft?&lt;/span&gt;
use_xft &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Xft font when Xft is enabled&lt;/span&gt;
xftfont Sans:size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;11  
own_window_argb_visual &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#own_window_colour hotpink&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Text alpha when using Xft&lt;/span&gt;
xftalpha 0.8
&lt;span class=&quot;c&quot;&gt;# on_bottom yes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# mail spool&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# mail_spool $MAIL&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Update interval in seconds&lt;/span&gt;
update_interval 1
&lt;span class=&quot;c&quot;&gt;# Create own window instead of using desktop (required in nautilus)&lt;/span&gt;
own_window &lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;own_window_transparent &lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;own_window_hints undecorated,below,sticky,skip_taskbar,skip_pager
&lt;span class=&quot;c&quot;&gt;#own_window_type override&lt;/span&gt;
own_window_type dock
&lt;span class=&quot;c&quot;&gt;# Use double buffering (reduces flicker, may not work for everyone)&lt;/span&gt;
double_buffer &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Minimum size of text area&lt;/span&gt;
minimum_size 260 5
maximum_width 400
&lt;span class=&quot;c&quot;&gt;# Draw shades?&lt;/span&gt;
draw_shades no
&lt;span class=&quot;c&quot;&gt;# Draw outlines?&lt;/span&gt;
draw_outline no
&lt;span class=&quot;c&quot;&gt;# Draw borders around text&lt;/span&gt;
draw_borders no
&lt;span class=&quot;c&quot;&gt;# Stippled borders?&lt;/span&gt;
stippled_borders no
&lt;span class=&quot;c&quot;&gt;# border margins&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# border_margin 4&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# border width&lt;/span&gt;
border_width 1
&lt;span class=&quot;c&quot;&gt;# Default colors and also border colors&lt;/span&gt;
default_color white
default_shade_color white
default_outline_color white
&lt;span class=&quot;c&quot;&gt;# Text alignment, other possible values are commented&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#alignment top_left&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#minimum_size 10 10&lt;/span&gt;
gap_x 10
gap_y 35
alignment top_right
&lt;span class=&quot;c&quot;&gt;#alignment bottom_left&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#alignment bottom_right&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Gap between borders of screen and text&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Add spaces to keep things from moving about?  This only affects&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# certain objects.&lt;/span&gt;
use_spacer none
&lt;span class=&quot;c&quot;&gt;# Subtract file system buffers from used memory?&lt;/span&gt;
no_buffers &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# set to yes if you want all text to be in uppercase&lt;/span&gt;
uppercase no
&lt;span class=&quot;c&quot;&gt;# none, xmms, bmp, audacious, infopipe (default is none)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# xmms_player bmp&lt;/span&gt;


TEXT
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; #006400&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;SYSTEM &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Time:$alignr${time %Y.%m.%d}$alignc   ${time %H:%M:%S}$alignr   Week:${time %w}&lt;/span&gt;
Hostname:                Parrot Security
Kernel: &lt;span class=&quot;nv&quot;&gt;$alignr$kernel&lt;/span&gt;
Machine:&lt;span class=&quot;nv&quot;&gt;$alignr$machine&lt;/span&gt;
Temp: &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; sensors | grep &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Core 0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; | cut -c17-22&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;C
&lt;span class=&quot;c&quot;&gt;###############&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; #FF8C00&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;MEMORY &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
Ram &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mem&lt;/span&gt; / &lt;span class=&quot;nv&quot;&gt;$memmax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$memperc&lt;/span&gt;%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;membar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
Highest MEM &lt;span class=&quot;nv&quot;&gt;$alignr&lt;/span&gt; MEM%
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; name 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$alignr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; mem 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; name 2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$alignr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; mem 2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; name 3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$alignr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; mem 3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##############&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; #BC8F8F&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;CPU &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
Frequency: &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; dyn&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; MHz
Processes: &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$processes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$running_processes&lt;/span&gt; running&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Load: &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loadavg&lt;/span&gt;
CPU1 &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; cpu1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;%
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cpubar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 4 cpu1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
CPU2 &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; cpu2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;%
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cpubar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 4 cpu2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
Highest CPU &lt;span class=&quot;nv&quot;&gt;$alignr&lt;/span&gt; CPU%
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; name 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; cpu 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; name 2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; cpu 2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; name 3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; cpu 3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##############&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; #228B22&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;FILE SYSTEM &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
Root: &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fs_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; /&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; / &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fs_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; /&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fs_bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 4 /&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#############&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; white&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;ETHERNET &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
Down &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;downspeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; eth0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /s &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Up &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;upspeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; eth0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /s
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;downspeedgraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; eth0 25,107&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;upspeedgraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; eth0 25,107&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
Total &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;totaldown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; eth0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Total &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;totalup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; eth0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#############&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; white&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;WLAN &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
Down &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;downspeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; wlx48022a54bc53&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /s &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Up &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;upspeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; wlx48022a54bc53&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /s
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;downspeedgraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; wlx48022a54bc53 25,107&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;upspeedgraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; wlx48022a54bc53 25,107&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
Total &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;totaldown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; wlx48022a54bc53&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;Total &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;totalup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; wlx48022a54bc53&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#############&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/conky/conkyrc.jpg&quot; alt=&quot;conkyrc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​	You can download here: &lt;a href=&quot;conkyrc.zip&quot;&gt;.conkyrc&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;configure-with-guibeginner&quot;&gt;Configure with GUI[Beginner]&lt;/h3&gt;

&lt;p&gt;​	&lt;strong&gt;&lt;em&gt;Conky Manager&lt;/em&gt;&lt;/strong&gt; is a friendly GUI tool developed to use conky easier.&lt;/p&gt;

&lt;p&gt;​	Use the following commands in terminal to install Conky Manager:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:teejee2008/ppa
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;conky-manager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	Launch the Conky Manager and have fun!&lt;/p&gt;

&lt;h2 id=&quot;advanced-usage--issues&quot;&gt;Advanced Usage &amp;amp; Issues&lt;/h2&gt;

&lt;h3 id=&quot;start-conky-automatically&quot;&gt;Start conky automatically&lt;/h3&gt;

&lt;p&gt;​	You can write a shell script to start conky automatically:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; ’ ’ | &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; pm-powersave

&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;3

conky &amp;amp; &lt;span class=&quot;nb&quot;&gt;disown

sleep &lt;/span&gt;30

pkill run.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	Then add it to startup applications list.&lt;/p&gt;

&lt;h3 id=&quot;conky-disappears&quot;&gt;Conky disappears…&lt;/h3&gt;

&lt;p&gt;​	If conky disappears on clicking desktop in desktop environments like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mate&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gnome&lt;/code&gt; and so on, this may help you:&lt;/p&gt;

&lt;p&gt;​	change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;own_window_type desktop&lt;/code&gt; to:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;own_window_type dock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	Or you will prefer to hidden desktop icons, the conky won’t disappear either(but of course you can’t see desktop icons).&lt;/p&gt;</content><author><name>Theodore Cooper</name><email>ccooperr2005@gmail.com</email></author><category term="Linux" /><category term="Beautify" /><category term="Linux" /><category term="Beautify" /><summary type="html"></summary></entry><entry><title type="html">Delete single file &amp;amp; folder from a Github repository</title><link href="https://theodorecooper.github.io/github/2021-githubrm/" rel="alternate" type="text/html" title="Delete single file &amp;amp; folder from a Github repository" /><published>2021-01-02T00:00:00+08:00</published><updated>2021-06-18T19:43:02+08:00</updated><id>https://theodorecooper.github.io/github/githubrm</id><content type="html" xml:base="https://theodorecooper.github.io/github/2021-githubrm/">&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sometimes we need to delete single file or folder in a git respository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;​	First of all, we use Git Bash in Windows (or Terminal in Linux, OSX).&lt;/p&gt;

&lt;h2 id=&quot;clone-repository&quot;&gt;Clone Repository&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://xxxx/xxx/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;remove-local-file--folder&quot;&gt;Remove local file &amp;amp; folder&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xxx/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;file.file	&lt;span class=&quot;c&quot;&gt;#remove single file&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; folder/	&lt;span class=&quot;c&quot;&gt;#remove folder&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;commit&quot;&gt;Commit&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;remove some files&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;push&quot;&gt;Push&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin xxxx	&lt;span class=&quot;c&quot;&gt;#xxxx is your branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Theodore Cooper</name><email>ccooperr2005@gmail.com</email></author><category term="Github" /><category term="Github" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://theodorecooper.github.io/assets/img/blog/githubrm/github.jpg" /><media:content medium="image" url="https://theodorecooper.github.io/assets/img/blog/githubrm/github.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Install Android x86 in VMware &amp;amp; Virtualbox</title><link href="https://theodorecooper.github.io/linux/2021-androidx86/" rel="alternate" type="text/html" title="Install Android x86 in VMware &amp;amp; Virtualbox" /><published>2021-01-01T00:00:00+08:00</published><updated>2021-06-25T10:01:31+08:00</updated><id>https://theodorecooper.github.io/linux/androidx86</id><content type="html" xml:base="https://theodorecooper.github.io/linux/2021-androidx86/">&lt;blockquote&gt;
  &lt;p&gt;​	So, finally, I remember to write an article about &lt;strong&gt;&lt;em&gt;Android x86&lt;/em&gt;&lt;/strong&gt;, This time I’ll tell all about Android x86.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#whats-android-x86&quot; id=&quot;markdown-toc-whats-android-x86&quot;&gt;What’s &lt;strong&gt;&lt;em&gt;Android x86&lt;/em&gt;&lt;/strong&gt;?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#first-get-android-x86&quot; id=&quot;markdown-toc-first-get-android-x86&quot;&gt;First, get Android x86&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installation&quot; id=&quot;markdown-toc-installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#finally--setup-android-x86&quot; id=&quot;markdown-toc-finally--setup-android-x86&quot;&gt;Finally! &amp;amp; Setup Android x86&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#moreover&quot; id=&quot;markdown-toc-moreover&quot;&gt;Moreover…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-android-x86&quot;&gt;What’s &lt;strong&gt;&lt;em&gt;Android x86&lt;/em&gt;&lt;/strong&gt;?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;​	Android-x86 is an open source project licensed under Apache Public License 2.0 that makes an unofficial  porting of Google’s Android mobile operating system to run on devices  powered by AMD and Intel x86 processors, rather than RISC-based ARM chips. Developers Chih-Wei Huang and Yi Sun originated the project in 2009.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;​	So, it’s just a common system. Today, let’s install this freak system!&lt;/p&gt;

&lt;p&gt;​	Platform:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linux (Windows, OSX is also suitable for this article)&lt;/li&gt;
  &lt;li&gt;VMware 15 (Virtualbox is also suitable)&lt;/li&gt;
  &lt;li&gt;Android x86 (Here I use Android-x86 6.0)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;first-get-android-x86&quot;&gt;First, get Android x86&lt;/h2&gt;

&lt;p&gt;​	First, we need an image to install Android x86. I suggest downloading from the official website: &lt;a href=&quot;https://www.android-x86.org/&quot;&gt;https://www.android-x86.org/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/officalwebsite.PNG&quot; alt=&quot;The Official Website - Android x86&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​	You see, click the big blue button &lt;strong&gt;Donwload&lt;/strong&gt;, then choose a mirror (FOSSHUB or OSDN) to download. We need the &lt;strong&gt;&lt;em&gt;android-x86-6.0-r3.iso&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/file.PNG&quot; alt=&quot;android-x86-6.0-r3.iso&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;center&gt;--- A few moments later ---&lt;/center&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​	Finally we get Android x86.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new virtual machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/create.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/create0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use the ISO image that you downloaded from the website.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/create1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/create2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Give it a lovely name?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/name.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We need at least 2GB memory to run Android x86.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/memory.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/other.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/other0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create virtual disk, I recommend 40GB and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/other1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/disk.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/disk0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Now, let’s start the vm&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Choose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Installation - Install Android-x86 to harddisk &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/boot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Do not use GPT!!!&lt;/em&gt;&lt;/strong&gt; Don’t ask why…😭&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/gpt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create new partition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/par.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Primary&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/par0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/par1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bootable&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/par2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/par3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write partition table to disk.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/par4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enter “yes” to write.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/par5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cfdisk&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/par6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select the partition.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/par7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Format as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ext4&lt;/code&gt; (recommend)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/par8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/par9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/par10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install boot loader.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/loader.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/system&lt;/code&gt; as read-write.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/rw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Installing…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/installing.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;center&gt;--- A few moments later ---&lt;/center&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reboot (better not choose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run Android-x86&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/reboot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Here’s the &lt;strong&gt;&lt;em&gt;Grub&lt;/em&gt;&lt;/strong&gt;!!! Boot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Android-x86 6.0-r3&lt;/code&gt;!!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/grub.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​	&lt;strong&gt;&lt;em&gt;But…&lt;/em&gt;&lt;/strong&gt;, oops!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/oop.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All right, maybe we should &lt;strong&gt;&lt;em&gt;configure this sucky system further&lt;/em&gt;&lt;/strong&gt;. The solution is editing the grub in Debug mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/debug.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After enter the command line, firstly it needs to remount &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rw&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/debug0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use vim to edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt/grub/menu.lst&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/vi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/vi0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nomodeset&lt;/code&gt; after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quiet&lt;/code&gt; like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/vi1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Save &amp;amp; Reboot&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;finally--setup-android-x86&quot;&gt;Finally! &amp;amp; Setup Android x86&lt;/h2&gt;

&lt;p&gt;​	Successfully boot Android x86!!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/suc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/suc0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set date &amp;amp; time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/date.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your beautiful name:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/user.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete!!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/desktop.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/androidx86/desktop0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;moreover&quot;&gt;Moreover…&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;If installed applications crashes easily, please run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enable_houdini&lt;/code&gt; in terminal.&lt;/li&gt;
  &lt;li&gt;I recommend to use VMware, the VBox there’s something wrong!!!😡&lt;/li&gt;
  &lt;li&gt;Have fun!!!&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Theodore Cooper</name><email>ccooperr2005@gmail.com</email></author><category term="Linux" /><category term="Linux" /><summary type="html">​ So, finally, I remember to write an article about Android x86, This time I’ll tell all about Android x86.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://theodorecooper.github.io/assets/img/blog/androidx86/androidx86.jpeg" /><media:content medium="image" url="https://theodorecooper.github.io/assets/img/blog/androidx86/androidx86.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Here’s to 2021!</title><link href="https://theodorecooper.github.io/other/2021-coming2021/" rel="alternate" type="text/html" title="Here’s to 2021!" /><published>2021-01-01T00:00:00+08:00</published><updated>2021-06-18T22:08:15+08:00</updated><id>https://theodorecooper.github.io/other/coming2021</id><content type="html" xml:base="https://theodorecooper.github.io/other/2021-coming2021/">&lt;h2 id=&quot;2021&quot;&gt;&lt;strong&gt;&lt;em&gt;2021&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;h2 id=&quot;wishing-you&quot;&gt;Wishing you&lt;/h2&gt;

&lt;h2 id=&quot;peace-health-happiness&quot;&gt;Peace, health, happiness&lt;/h2&gt;

&lt;h2 id=&quot;and-prosperity&quot;&gt;and prosperity&lt;/h2&gt;

&lt;h2 id=&quot;in-coming-year&quot;&gt;in coming year&lt;/h2&gt;

&lt;center&gt;┏━━┓┏━━┓┏━━┓┏━┓ &lt;/center&gt;

&lt;center&gt;┗━┓┃┃┏┓┃┗━┓┃    ┃ ┃&lt;/center&gt;

&lt;center&gt;┏━┛┃┃┃  ┃┃┏━┛┃    ┃ ┃&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;center&gt;Theodore Cooper&lt;/center&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;center&gt;┃┏━┛┃┃  ┃┃┃┏━┃    ┃ ┃&lt;/center&gt;

&lt;center&gt;┃┗━┓┃┗┛┃ ┃┗━┓    ┃ ┃&lt;/center&gt;

&lt;center&gt;┗━━┛┗━━┛ ┗━━┛┗━┛&lt;/center&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/coming2021/2021.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Theodore Cooper</name><email>ccooperr2005@gmail.com</email></author><category term="Other" /><category term="Other" /><summary type="html">2021</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://theodorecooper.github.io/assets/img/blog/coming2021/2021.png" /><media:content medium="image" url="https://theodorecooper.github.io/assets/img/blog/coming2021/2021.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">C Tutorial – Command Line Arguments</title><link href="https://theodorecooper.github.io/c/c++/c%20tutorials/linux/2020-C-Tutorial-arg/" rel="alternate" type="text/html" title="C Tutorial – Command Line Arguments" /><published>2020-12-26T00:00:00+08:00</published><updated>2021-06-18T22:17:37+08:00</updated><id>https://theodorecooper.github.io/c/c++/c%20tutorials/linux/C-Tutorial-arg</id><content type="html" xml:base="https://theodorecooper.github.io/c/c++/c%20tutorials/linux/2020-C-Tutorial-arg/">&lt;p&gt;&lt;img src=&quot;/assets/img/blog/C-Tutorial-arg/c.png&quot; alt=&quot;C&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-is-command-line-arguments&quot;&gt;What is Command Line Arguments&lt;/h2&gt;

&lt;p&gt;​	When executing the program, you can pass values to the C program from the command line. These values are called command line arguments, and they are important to the program, especially when you want to control the program from the outside, rather than hard-coding these values in the code. Even all the program in Linux will provide command line arguments.&lt;/p&gt;

&lt;h2 id=&quot;use-command-line-arguments&quot;&gt;Use Command Line Arguments&lt;/h2&gt;

&lt;p&gt;​	Command line arguments are handled using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; function arguments, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argc&lt;/code&gt; refers to the number of arguments passed in, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[]&lt;/code&gt; is an pointer array which point to each argument passed to the program. The following is a simple example:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The argument supplied is %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Too many arguments.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No argument.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	It produces the following result:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No argument&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/a.out
No argument.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Single argument&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/a.out aaarrrggg
The argument supplied is aaarrrggg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Two arguments &amp;amp; Above&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/a.out arg1 arg2
Too many arguments.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;explanation--argv0-argv1&quot;&gt;Explanation — &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[0]&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt;…&lt;/h2&gt;

&lt;p&gt;​	You should know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[0]&lt;/code&gt; holds the name of the program itself and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt;  is a pointer to the first command line argument supplied, and *argv[n]  is the last argument. If no arguments are supplied, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argc&lt;/code&gt; will be 1,  and if you pass one argument then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argc&lt;/code&gt; is set at 2.&lt;/p&gt;

&lt;p&gt;​	You pass all the command line arguments separated by a space, but if  argument itself has a space then you can pass such arguments by putting  them inside double quotes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot; &quot;&lt;/code&gt; or single quotes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;' '&lt;/code&gt;.  So, let’s try this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/a.out &lt;span class=&quot;s2&quot;&gt;&quot;arg1 arg2&quot;&lt;/span&gt;
The argument supplied is aaarrrggg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;getopt--getopt_long&quot;&gt;getopt() &amp;amp; getopt_long()&lt;/h2&gt;

&lt;p&gt;​	In Linux, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getopt()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getopt_long()&lt;/code&gt; to pass arguments:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;

int main&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int argc, char &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;argv[]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    char &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;optstr &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;p:n:m:c:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    struct option opts[] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;, 1, NULL, &lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;, 1, NULL, &lt;span class=&quot;s1&quot;&gt;'n'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mtime&quot;&lt;/span&gt;, 1, NULL, &lt;span class=&quot;s1&quot;&gt;'m'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ctime&quot;&lt;/span&gt;, 1, NULL, &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0, 0, 0, 0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    int opt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;opt &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; getopt_long&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;argc, argv, optstr, opts, NULL&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        switch&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;opt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;:
                strcpy&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;path, optarg&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'n'&lt;/span&gt;:
                strcpy&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;targetname, optarg&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'m'&lt;/span&gt;:
                modifiedtime &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; atoi&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;optarg&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;:
                changetime &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; atoi&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;optarg&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            default:
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;strchr&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;optstr, optopt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; NULL&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                    fprintf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stderr, &lt;span class=&quot;s2&quot;&gt;&quot;unknown option '-%c'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;, optopt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    fprintf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stderr, &lt;span class=&quot;s2&quot;&gt;&quot;option requires an argument '-%c'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;, optopt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    findInDir&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Theodore Cooper</name><email>ccooperr2005@gmail.com</email></author><category term="C/C++" /><category term="C Tutorials" /><category term="Linux" /><category term="C/C++" /><category term="C Tutorials" /><category term="Linux" /><summary type="html"></summary></entry></feed>