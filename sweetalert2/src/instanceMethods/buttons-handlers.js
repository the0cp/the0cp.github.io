import{isVisible}from"../utils/dom/domUtils.js";import{getInputValue}from"../utils/dom/inputUtils.js";import{getValidationMessage}from"../utils/dom/getters.js";import{asPromise}from"../utils/utils.js";import{showLoading}from"../staticMethods/showLoading.js";import{DismissReason}from"../utils/DismissReason.js";export const handleConfirmButtonClick=(e,i)=>{e.disableButtons(),i.input?handleConfirmOrDenyWithInput(e,i,"confirm"):confirm(e,i,!0)};export const handleDenyButtonClick=(e,i)=>{e.disableButtons(),i.returnInputValueOnDeny?handleConfirmOrDenyWithInput(e,i,"deny"):deny(e,i,!1)};export const handleCancelButtonClick=(e,i)=>{e.disableButtons(),i(DismissReason.cancel)};const handleConfirmOrDenyWithInput=(e,i,s)=>{const n=getInputValue(e,i);i.inputValidator?handleInputValidator(e,i,n):e.getInput().checkValidity()?"deny"===s?deny(e,i,n):confirm(e,i,n):(e.enableButtons(),e.showValidationMessage(i.validationMessage))},handleInputValidator=(e,i,s)=>{e.disableInput();Promise.resolve().then((()=>asPromise(i.inputValidator(s,i.validationMessage)))).then((n=>{e.enableButtons(),e.enableInput(),n?e.showValidationMessage(n):confirm(e,i,s)}))},deny=(e,i,s)=>{if(i.preDeny){Promise.resolve().then((()=>asPromise(i.preDeny(s,i.validationMessage)))).then((i=>{!1===i?e.hideLoading():e.closePopup({isDenied:!0,value:void 0===i?s:i})}))}else e.closePopup({isDenied:!0,value:s})},succeedWith=(e,i)=>{e.closePopup({isConfirmed:!0,value:i})},confirm=(e,i,s)=>{if(i.showLoaderOnConfirm&&showLoading(),i.preConfirm){e.resetValidationMessage();Promise.resolve().then((()=>asPromise(i.preConfirm(s,i.validationMessage)))).then((i=>{isVisible(getValidationMessage())||!1===i?e.hideLoading():succeedWith(e,void 0===i?s:i)}))}else succeedWith(e,s)};