import{swalClasses}from"../classes.js";import{uniqueArray,toArray}from"../utils.js";import{isVisible}from"./domUtils.js";export const getContainer=()=>document.body.querySelector(`.${swalClasses.container}`);export const elementBySelector=e=>{const s=document.body.querySelector(`.${swalClasses.container}`);return s?s.querySelector(e):null};const elementByClass=e=>elementBySelector(`.${e}`);export const getPopup=()=>elementByClass(swalClasses.popup);export const getIcons=()=>{const e=getPopup();return toArray(e.querySelectorAll(`.${swalClasses.icon}`))};export const getIcon=()=>{const e=getIcons().filter((e=>isVisible(e)));return e.length?e[0]:null};export const getTitle=()=>elementByClass(swalClasses.title);export const getContent=()=>elementByClass(swalClasses.content);export const getHtmlContainer=()=>elementByClass(swalClasses["html-container"]);export const getImage=()=>elementByClass(swalClasses.image);export const getProgressSteps=()=>elementByClass(swalClasses["progress-steps"]);export const getValidationMessage=()=>elementByClass(swalClasses["validation-message"]);export const getConfirmButton=()=>elementBySelector(`.${swalClasses.actions} .${swalClasses.confirm}`);export const getDenyButton=()=>elementBySelector(`.${swalClasses.actions} .${swalClasses.deny}`);export const getInputLabel=()=>elementByClass(swalClasses["input-label"]);export const getLoader=()=>elementBySelector(`.${swalClasses.loader}`);export const getCancelButton=()=>elementBySelector(`.${swalClasses.actions} .${swalClasses.cancel}`);export const getActions=()=>elementByClass(swalClasses.actions);export const getHeader=()=>elementByClass(swalClasses.header);export const getFooter=()=>elementByClass(swalClasses.footer);export const getTimerProgressBar=()=>elementByClass(swalClasses["timer-progress-bar"]);export const getCloseButton=()=>elementByClass(swalClasses.close);const focusable='\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n';export const getFocusableElements=()=>{const e=toArray(getPopup().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort(((e,s)=>(e=parseInt(e.getAttribute("tabindex")))>(s=parseInt(s.getAttribute("tabindex")))?1:e<s?-1:0)),s=toArray(getPopup().querySelectorAll(focusable)).filter((e=>"-1"!==e.getAttribute("tabindex")));return uniqueArray(e.concat(s)).filter((e=>isVisible(e)))};export const isModal=()=>!isToast()&&!document.body.classList.contains(swalClasses["no-backdrop"]);export const isToast=()=>document.body.classList.contains(swalClasses["toast-shown"]);export const isLoading=()=>getPopup().hasAttribute("data-loading");